{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState, useEffect } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Task from \"./components/Task\";\nvar boredAPIURL = 'https://www.boredapi.com/api/activity/';\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      task = _useState2[0],\n      setTask = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      taskItems = _useState4[0],\n      setTaskItems = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      isLoading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      data = _useState8[0],\n      setData = _useState8[1];\n\n  useEffect(function () {\n    fetch(boredAPIURL).then(function (response) {\n      return response.json();\n    }).then(function (json) {\n      return setData(json.activity);\n    }).then(console.log(data)).catch(function (error) {\n      return alert(error);\n    }).finally(setLoading(false));\n  });\n\n  var handleAddTask = function handleAddTask() {\n    Keyboard.dismiss();\n    console.log(task);\n    setTaskItems([].concat(_toConsumableArray(taskItems), [task]));\n    setTask(null);\n  };\n\n  var handleRandTask = function handleRandTask() {\n    console.log(data);\n    setTaskItems([].concat(_toConsumableArray(taskItems), [data]));\n    setTask(null);\n  };\n\n  var completeTask = function completeTask(index) {\n    var itemsCopy = _toConsumableArray(taskItems);\n\n    itemsCopy.splice(index, 1);\n    setTaskItems(itemsCopy);\n  };\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(View, {\n    style: styles.tasksWrapper\n  }, React.createElement(Text, {\n    style: styles.sectionTitle\n  }, \"Today's Tasks\"), React.createElement(View, {\n    style: styles.items\n  }, taskItems.map(function (item, index) {\n    return React.createElement(TouchableOpacity, {\n      key: index,\n      onPress: function onPress() {\n        return completeTask(index);\n      }\n    }, React.createElement(Task, {\n      text: item\n    }));\n  }))), React.createElement(KeyboardAvoidingView, {\n    behavior: Platform.OS === 'ios' ? 'padding' : 'height',\n    style: styles.writeTaskWrapper\n  }, React.createElement(TextInput, {\n    style: styles.input,\n    placeholder: 'write a task',\n    value: task,\n    onChangeText: function onChangeText(text) {\n      return setTask(text);\n    }\n  }), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setTimeout(handleAddTask(), 20000);\n    }\n  }, React.createElement(View, {\n    style: styles.addWrapper\n  }, React.createElement(Text, {\n    style: styles.addText\n  }, \"+\"))), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return setTimeout(handleRandTask(), 20000);\n    }\n  }, React.createElement(View, {\n    style: styles.addWrapper\n  }, React.createElement(Text, {\n    style: styles.addText\n  }, \"!+!\")))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#bebebe'\n  },\n  tasksWrapper: {\n    paddingTop: 80,\n    paddingHorizontal: 20\n  },\n  sectionTitle: {\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  items: {\n    marginTop: 30\n  },\n  writeTaskWrapper: {\n    position: 'absolute',\n    bottom: 60,\n    width: '100%',\n    flexDirection: 'row',\n    justifyContent: 'space-around',\n    alignItems: 'center'\n  },\n  input: {\n    paddingVertical: 15,\n    paddingHorizontal: 15,\n    backgroundColor: \"#FFF\",\n    borderRadius: 60,\n    borderColor: '#C0C0C0',\n    borderWidth: 1,\n    width: 250\n  },\n  addWrapper: {\n    width: 60,\n    height: 60,\n    backgroundColor: '#FFF',\n    borderRadius: 60,\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderColor: '#C0C0C0',\n    borderWidth: 1\n  },\n  addText: {}\n});","map":{"version":3,"sources":["C:/Users/oscar/OneDrive/Documents/Coding/React-Native-Bored-ToDo-List/App.js"],"names":["React","useState","useEffect","Task","boredAPIURL","App","task","setTask","taskItems","setTaskItems","isLoading","setLoading","data","setData","fetch","then","response","json","activity","console","log","catch","error","alert","finally","handleAddTask","Keyboard","dismiss","handleRandTask","completeTask","index","itemsCopy","splice","styles","container","tasksWrapper","sectionTitle","items","map","item","Platform","OS","writeTaskWrapper","input","text","setTimeout","addWrapper","addText","StyleSheet","create","flex","backgroundColor","paddingTop","paddingHorizontal","fontSize","fontWeight","marginTop","position","bottom","width","flexDirection","justifyContent","alignItems","paddingVertical","borderRadius","borderColor","borderWidth","height"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport { \r\n  StyleSheet, \r\n  Text, \r\n  View,\r\n  KeyboardAvoidingView,\r\n  TextInput,\r\n  Platform,\r\n  TouchableOpacity,\r\n  Keyboard,\r\n  ActivityIndicator,} from 'react-native';\r\nimport Task from './components/Task'\r\n\r\n//api URL endpoint\r\nconst boredAPIURL='https://www.boredapi.com/api/activity/'\r\n\r\nexport default function App() {\r\n  //the \"task in the parameter is the name of the state in this case to track the task\"\r\n  //\"the 2nd parameter is the function used to track the state\"\r\nconst [task, setTask] = useState();\r\n//\"we use state for things that change often in our program\"\r\nconst[taskItems, setTaskItems] = useState([]);\r\n\r\n//state for loading data from the API\r\nconst[isLoading, setLoading] = useState(true);\r\n//state to hold the actual data\r\nconst[data, setData] = useState();\r\n\r\nuseEffect(() =>{\r\n  fetch(boredAPIURL)\r\n  .then((response)=>response.json())\r\n  .then((json)=>setData(json.activity))\r\n  .then(console.log(data))\r\n  .catch((error)=>alert(error))\r\n  .finally(setLoading(false));\r\n});\r\n\r\nconst handleAddTask = () =>{\r\n  Keyboard.dismiss();\r\n  console.log(task);\r\n  setTaskItems([...taskItems,task])\r\n  setTask(null);\r\n}\r\n\r\nconst handleRandTask = () =>{\r\n  console.log(data);\r\n  setTaskItems([...taskItems,data])\r\n  setTask(null);\r\n}\r\n\r\nconst completeTask = (index) => {\r\n  let itemsCopy = [...taskItems];\r\n  itemsCopy.splice(index, 1);\r\n  setTaskItems(itemsCopy);\r\n}\r\n\r\n  return (\r\n  <View style={styles.container}>\r\n\r\n    {/*today's tasks */}\r\n    <View style={styles.tasksWrapper}>\r\n    <Text style={styles.sectionTitle}>Today's Tasks</Text>  \r\n\r\n\r\n    <View style={styles.items}>\r\n      {/*this is where the tasks will go*/}\r\n      {\r\n        taskItems.map((item, index) => {\r\n          return( //<Task key={index}  text={item}/>\r\n            <TouchableOpacity key={index} onPress={() => completeTask(index)}>\r\n              <Task  text={item}/>\r\n            </TouchableOpacity>\r\n          )\r\n        })\r\n      }\r\n    </View>\r\n    </View>\r\n\r\n    {/*add a task */}\r\n    <KeyboardAvoidingView\r\n    behavior={Platform.OS === 'ios' ? 'padding':'height'}\r\n    style={styles.writeTaskWrapper} \r\n    >\r\n    \r\n      <TextInput style={styles.input} placeholder={'write a task'} value={task} onChangeText={text=> setTask(text)} />\r\n\r\n        <TouchableOpacity onPress={() => setTimeout(handleAddTask(), 20000)}>\r\n          <View style={styles.addWrapper}>\r\n            <Text style={styles.addText}>+</Text>\r\n          </View>\r\n        </TouchableOpacity>\r\n\r\n        <TouchableOpacity onPress={() => setTimeout(handleRandTask(), 20000)}>\r\n          <View style={styles.addWrapper}>\r\n            <Text style={styles.addText}>!+!</Text>\r\n          </View>\r\n        </TouchableOpacity>\r\n    \r\n    </KeyboardAvoidingView>\r\n\r\n  </View>\r\n  );\r\n}\r\n\r\n  const styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: '#bebebe',\r\n\r\n  },\r\n  tasksWrapper: {\r\n    paddingTop: 80,\r\n    paddingHorizontal: 20, \r\n  },\r\n  sectionTitle: {\r\n    fontSize: 24,\r\n    fontWeight: 'bold',\r\n  },\r\n  items: {\r\n    marginTop:30,\r\n  },\r\n  writeTaskWrapper:{\r\n    position:'absolute',\r\n    bottom: 60,\r\n    width:'100%',\r\n    flexDirection: 'row',\r\n    justifyContent: 'space-around',\r\n    alignItems: 'center'\r\n  } ,\r\n  input:{\r\n    paddingVertical:15,\r\n    paddingHorizontal:15,\r\n    backgroundColor:\"#FFF\",\r\n    borderRadius: 60,\r\n    borderColor:'#C0C0C0',\r\n    borderWidth:1,\r\n    width:250,\r\n  } ,\r\n  addWrapper:{\r\n    width:60,\r\n    height:60,\r\n    backgroundColor:'#FFF',\r\n    borderRadius:60,\r\n    justifyContent: 'center',\r\n    alignItems:'center',\r\n    borderColor:'#C0C0C0',\r\n    borderWidth:1,\r\n  } ,\r\n  addText:{} ,\r\n});\r\n"]},"metadata":{},"sourceType":"module"}